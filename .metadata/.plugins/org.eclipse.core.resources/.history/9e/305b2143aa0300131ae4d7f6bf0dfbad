package splat.sharingcontroller;

import network.NetworkEvent;
import network.PotatoType;
import serverconnection.HandshakeListener;
import serverconnection.HandshakeListener.OnConnectionConfirmedListener;
import serverconnection.PingListener;
import serverconnection.ServerConnection;
import serverconnection.ServerConnection.OnDisconnectListener;
import splat.potatomodel.GameState;
import splat.potatomodel.Settings;
import splat.potatoview.CharacterSelectActivity;
import splat.potatoview.LobbyActivity;
import android.content.Intent;
import android.widget.Toast;

public class CharacterSelectController {


    public CharacterSelectController(CharacterSelectActivity view) {
        this.view = view;
        ServerConnection sc = NetworkController.getServerConnection();
        if (sc != null) {
            // We backed into this activity from the lobby
            sc.setOnReceiveNetworkEventListener(new BackoutListener());
        }
    }

    public void selectCharacter(short charId) {
        GameState.getInstance().setMyCharacterId(charId);
    }
    
    public short getCharacter() {
        return GameState.getInstance().getMyCharacterId();
    }

    public void toLobby() {
        NetworkController.startConnection(Settings.getIp(), Settings.getPort(), Settings.newId(),
                characterDisconnectListener);
        NetworkController.getServerConnection().connect(
                new HandshakeListener(new OnConnectionConfirmedListener() {
                    @Override
                    public void onConnectionConfirmed(ServerConnection connection) {
                        connection.setOnReceiveNetworkEventListener(null);
                        connection.setOnDisconnectListener(null);
                        connection.sendEvent(new NetworkEvent(PotatoType.SELECT_CHARACTER,
                                (Short) GameState.getInstance().getMyCharacterId()));
                        view.startActivity(new Intent(view, LobbyActivity.class));
                        view.finish();
                    }
                }));
    }

    /**
     * Shows message on disconnect
     * 
     * @author Sam
     */
    public class CharacterDisconnectListener implements OnDisconnectListener {
        @Override
        public void onDisconnect(ServerConnection connection) {
            view.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    view.showDisconnectDialog();
                }
            });
        }
    }

    private class BackoutListener extends PingListener {
        @Override
        public void onReceiveNetworkEvent(final ServerConnection serverConnection,
                final NetworkEvent event) {
            super.onReceiveNetworkEvent(serverConnection, event);
            if (event.getType().equals(PotatoType.QUIT_GAME)) {
                NetworkController.closeConnection();
                final String data = (String) event.getData();
                if (data != null) {
                    view.runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(view, data, Toast.LENGTH_LONG).show();
                        }
                    });
                }
            }
        }
    }
}
