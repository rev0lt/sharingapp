package server;

import java.util.HashMap;
import java.util.Timer;

import network.NetworkEvent;

public class SharingServer extends Server {

    public static final boolean DEBUG = true;
    public static final int GAME_PORT = 1337;

    public static void main(String[] args) {
        System.out.println("Attempting to start game server");
        SharingServer gameServer = new SharingServer(GAME_PORT, DEBUG);
        gameServer.run();
    }

    public SharingServer(int connectionListenerPort, boolean debug) {
        super(connectionListenerPort, debug);
    }

    @Override
    public void handleEvent(final NetworkEvent e) {
        super.handleEvent(e);
        // get the gameId aka the clientNumber
        short clientId = e.getGameId();
        if (e.getType().equals(PotatoType.SELECT_CHARACTER)) {
            handleCharacterSelect(gameId, e.getData());
        } else if (e.getType().equals(PotatoType.HIT_BY_POTATO)) {
            handleHitByPotato(gameId, e.getData());
        } else if (e.getType().equals(PotatoType.UPLOAD_SCORE)) {
            handleUploadScore(gameId, e.getData());
        } else if (e.getType().equals(PotatoType.START_GAME)) {
            handleStartGame(gameId, e.getData());
        } else if (e.getType().equals(PotatoType.QUIT_GAME)) {
            handleQuitGame(gameId, e.getData());
        }
        // we shouldn't be receiving any other events
    }

    

    private void sendToAllClients(NetworkEvent event) {
        for (Short id : players.keySet()) {
            ClientConnection client = confirmedClientConnections.get(id);
            if (client != null)
                client.sendEvent(event);
        }
    }
}
