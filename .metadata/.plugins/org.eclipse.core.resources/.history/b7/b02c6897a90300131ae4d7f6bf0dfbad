package splat.potatocontroller;

import network.NetworkEvent;
import network.PotatoType;
import serverconnection.HandshakeListener;
import serverconnection.ServerConnection;
import serverconnection.ServerConnection.OnDisconnectListener;
import splat.potatomodel.GameState;
import splat.potatomodel.HardCoded;
import splat.potatoview.CharacterSelectActivity;
import splat.potatoview.GameActivity;
import splat.potatoview.LobbyActivity;
import android.content.Intent;
import android.widget.Toast;

public class LobbyController {

    private final GameState state;
    private final LobbyActivity lobbyActivity;
    private ServerConnection sc;

    public LobbyController(LobbyActivity view) {
        this.state = GameState.getInstance();
        this.lobbyActivity = view;
        sc = NetworkController.getServerConnection();
        if (sc != null) {
            sc.setOnReceiveNetworkEventListener(new LobbyNetworkEventListener());
            sc.setOnDisconnectListener(new LobbyDisconnectListener());
        } else {
            String error = "Error: no server connection in LobbyActivity";
            System.err.println(error);
            Toast.makeText(view, error, Toast.LENGTH_LONG).show();
            Intent i = new Intent(view, CharacterSelectActivity.class);
            view.startActivity(i);
            view.finish();
        }
    }

    /**
     * @return This player's avatar.
     * 
     * @author josephsoltzberg
     */
    public int getMyAvatar() {
        return HardCoded.getAvatar(state.getMyCharacterId());
    }

    /**
     * Sends message that player is ready to start.
     */
    public void startSelected() {
        sc.sendEvent(new NetworkEvent(PotatoType.START_GAME, null));
    }

    public void onBackPressed() {
        sc.sendEvent(new NetworkEvent(PotatoType.QUIT_GAME, null));
    }

    /**
     * Sends player to game.
     * 
     * @param data
     */
    public void toGame(short data) {
        state.setMyClientId(data);
        sc.setOnDisconnectListener(null);

        lobbyActivity.freeResources();
        lobbyActivity.startActivity(new Intent(lobbyActivity, GameActivity.class));
        lobbyActivity.finish();
    }

    /**
     * Adds a player to the game state and to the view.
     * 
     * @param clientId
     * @param characterId
     * 
     * @author josephsoltzberg
     */
    private void addOpponent(short clientId, short characterId) {
        state.addOpponent(clientId, characterId);
        lobbyActivity.addOpponentImage(HardCoded.getAvatar(characterId), clientId);
    }

    /**
     * Removes an opponent from the game and the view.
     * 
     * @param clientId
     * 
     * @author josephsoltzberg
     */
    public void removeOpponent(short clientId) {
        state.removeOpponent(clientId);
        lobbyActivity.removeOpponentImage(clientId);
    }

    /**
     * Quits the game.
     * 
     * @param msg
     */
    public void quitGame(String msg) {
        if (msg != null) {
            Toast.makeText(lobbyActivity, msg, Toast.LENGTH_LONG).show();
        }
        NetworkController.closeConnection();
        GameState.resetAll();
        lobbyActivity.startActivity(new Intent(lobbyActivity, CharacterSelectActivity.class));
        lobbyActivity.finish();
    }

    private class LobbyNetworkEventListener extends HandshakeListener {

        @Override
        public void onReceiveNetworkEvent(final ServerConnection sc, final NetworkEvent evt) {
            super.onReceiveNetworkEvent(sc, evt);
            if (evt.getType().equals(PotatoType.START_GAME)) {
                sc.setOnReceiveNetworkEventListener(null);
                lobbyActivity.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        toGame((Short) evt.getData());
                    }
                });
            } else if (evt.getType().equals(PotatoType.PLAYER_JOINED)) {
                lobbyActivity.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        short[] opponentInfo = (short[]) evt.getData();
                        addOpponent(opponentInfo[0], opponentInfo[1]);
                    }
                });
            } else if (evt.getType().equals(PotatoType.PLAYER_LEFT)) {
                lobbyActivity.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Short opponentClientId = (Short) evt.getData();
                        removeOpponent(opponentClientId.shortValue());
                    }
                });
            } else if (evt.getType().equals(PotatoType.QUIT_GAME)) {
                lobbyActivity.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        String data = (String) evt.getData();
                        quitGame(data);
                    }
                });
            }
        }
    }

    /**
     * Shows message on disconnect
     * 
     * @author Sam
     */
    public class LobbyDisconnectListener implements OnDisconnectListener {
        @Override
        public void onDisconnect(ServerConnection connection) {
            lobbyActivity.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    lobbyActivity.showDisconnectDialog();
                }
            });
        }
    }
}
