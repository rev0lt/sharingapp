package splat.minigames;

import java.util.LinkedList;
import java.util.Random;

import splat.potatoview.GameActivity;
import splat.potatoview.ViewUtils;
import splat.potato.R;
import android.view.View;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationSet;
import android.view.animation.TranslateAnimation;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TableLayout;

public class PickingMinigame extends MinigameController {

    private static final int NUMBER_OF_ROWS = 5;
    private static final int NUMBER_OF_COLS = 5;
    private static final int NUMBER_OF_POTATOES = 5;

    private static final int ANIMATION_MOVE_RIGHT = 50;
    private static final int ANIMATION_MOVE_DURATION = 200;
    private static final int ANIMATION_ALPHA_DURATION = 250;
    private static final int ANIMATION_ALPHA_OFFSET = 200;

    private boolean isCurrentlyDigging = false;

    private LinkedList<Vegetable> vegetables;
    private int count;

    @Override
    public void initialize(GameActivity activity, View view) {
        super.initialize(activity, view);

        gameView = new PickingMinigameView();
        gameView.setView(view);
        gameView.initialize();

        ((PickingMinigameView) gameView).addVegetables(NUMBER_OF_ROWS, NUMBER_OF_COLS);

        count = NUMBER_OF_POTATOES;
        randomizePotatoes(count);
        restart();
    }

    @Override
    public void complete(int id) {
        super.complete(id);

        // Do this so you can't click during the transition
        isCurrentlyDigging = true;
    }

    @Override
    public void reset() {
        for (Vegetable v : vegetables) {
            ViewUtils.free(v.getView());
        }
        
        super.reset();
    }

    @Override
    public void restart() {
        count = NUMBER_OF_POTATOES;
        randomizePotatoes(count);

        for (Vegetable v : vegetables) {
            v.reset();
        }

        // This is because of the call in "complete"
        isCurrentlyDigging = false;
        super.restart();
    }

    public void pick(boolean isPotato) {
        if (isPotato) {
            count--;

            if (count <= 0) complete(GameActivity.Minigames.MINIGAME_PICKING.index());
        } else {
            // TODO: Doesn't work because they fill the rows from left, need to check.
            // randomizePotatoes(count);
        }
    }

    public Vegetable createVegetable() {
        ImageView image = new ImageView(activity);

        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(100, 100, 1);
        image.setLayoutParams(params);

        Vegetable result = new Vegetable(image);

        if (vegetables == null) vegetables = new LinkedList<Vegetable>();
        vegetables.add(result);

        return result;
    }

    public void randomizePotatoes(int count) {
        if (count > vegetables.size()) throw new Error("Too many potatoes for this game.");

        Random rand = new Random();

        boolean[] isPotato = new boolean[vegetables.size()];

        int potatoes = 0;
        while (potatoes < count) {
            int place = rand.nextInt(vegetables.size());

            if (isPotato[place]) {
                continue;
            } else {
                isPotato[place] = true;
                potatoes++;
            }
        }

        for (int i = 0; i < vegetables.size(); i++) {
            Vegetable v = vegetables.get(i);

            if (isPotato[i]) {
                v.isPotato = true;
                v.getView().setImageResource(R.drawable.happy_potato_gold);
            } else {
                v.isPotato = false;
                v.getView().setImageResource(R.drawable.angry_potato);
            }
        }
    }

    private class PickingMinigameView extends MinigameView {

        private TableLayout pickingGrid;

        @Override
        public void initialize() {
            pickingGrid = (TableLayout) view.findViewById(R.id.picking_table_layout);
        }

        @Override
        public void reset() {

        }

        @Override
        public void restart() {

        }

        public void addVegetables(int rows, int cols) {

            for (int i = 0; i < rows; i++) {
                LinearLayout row = new LinearLayout(activity);
                row.setOrientation(LinearLayout.HORIZONTAL);

                for (int j = 0; j < cols; j++) {
                    Vegetable v = createVegetable();
                    row.addView(v.getView());
                }

                pickingGrid.addView(row);
            }
        }
    }

    private class Vegetable {
        private ImageView view;

        public boolean isPotato = false;
        public boolean isInactive = false;

        public Vegetable(ImageView view) {
            this.view = view;
            setupListener();
        }

        public void setupListener() {
            view.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    if (isCurrentlyDigging || isInactive) return;

                    isCurrentlyDigging = true;

                    AnimationSet set = new AnimationSet(true);
                    set.setFillAfter(true);

                    TranslateAnimation move = new TranslateAnimation(0, ANIMATION_MOVE_RIGHT, 0, 0);
                    move.setDuration(ANIMATION_MOVE_DURATION);

                    AlphaAnimation alpha = new AlphaAnimation(1, 0);
                    alpha.setDuration(ANIMATION_ALPHA_DURATION);
                    alpha.setStartOffset(ANIMATION_ALPHA_OFFSET);

                    set.setAnimationListener(new AnimationListener() {

                        @Override
                        public void onAnimationEnd(Animation animation) {
                            isCurrentlyDigging = false;

                            pick(isPotato);

                            makeInactive();
                        }

                        @Override
                        public void onAnimationRepeat(Animation animation) {}

                        @Override
                        public void onAnimationStart(Animation animation) {
                            view.bringToFront();
                        }

                    });

                    set.addAnimation(move);
                    set.addAnimation(alpha);

                    view.startAnimation(set);
                }
            });
        }

        public void reset() {
            view.clearAnimation();
            isInactive = false;
        }

        public void makeInactive() {
            isInactive = true;
        }

        public ImageView getView() {
            return view;
        }
    }
}
